CONTRACT_TYPE{
	name = CleverSatGeneric
	title = title_Generic //TBD
	genericTitle = genericTitle_Generic //TBD
	group = CleverSat
	description = description_Generic //TBD
	genericDescription = genericDescription_Generic //TBD
	synopsis = synopsis_Generic //TBD
	completedMessage = completedMessage_Generic //TBD
	
	minExpiry = 10 //TBD
	maxExpiry = 10 //TBD
	deadline = 10 //TBD
	targetBody = @/chance_1 >= 90 ? HomeWorld() : @/targetBody1	
	maxSimultaneous = 1
	
	rewardScience = 1 //TBD
	rewardReputation = Random(2.0, 5.0) //TBD
	rewardFunds = Random(40000,60000) //TBD
	failureReputation = 1 //TBD
	failureFunds = 1 //TBD
	advanceFunds = 1 //TBD
	
	DATA{ //Selects a random orbited body to be used as target
		type = CelestialBody
		targetBody1 = OrbitedBodies().Random()
		title = Must have reached orbit.
	}
	
	DATA{ //Generates 2 distincts random number from 0 to 100 to be used as probalilities
		type = double
		chance_1 = Random(0,100)
		chance_2 = Random(0,100)
	}
	
	PARAMETER{
		name = SatOrbit //TBD
		type = VesselParameterGroup
		defineList = SatList
		disableOnStateChange = false

		PARAMETER{
			name = HasCrewCapacity
			type = HasCrewCapacity
			maxCapacity = 0
		}
	
			PARAMETER{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit
			index = 0
			deviationWindow = Prestige() == Trivial ? 10.0 : Prestige() == Significant ? 7.0 : 5.0 //credits to nightingale for this one. Should make prestige match difficulty of contract.
		}
	}
	
	PARAMETER{
		name = Duration //TBD
		type = Duration
		startCriteria = PARAMETER_COMPLETION
		parameter = SatOrbit
		duration = 10s
		preWaitText = Waiting for correct orbit.
		waitingText = Calibrating orbit
		completionText = Calibration completed.
	}

	REQUIREMENT{
		name = Solar Panel //TBD
		type = PartModuleUnlocked
		partModule = ModuleDeployableSolarPanel
	}

	REQUIREMENT{
		name = Probe //TBD
		type = PartUnlocked
		part = probeCoreSphere
	}
	
	BEHAVIOUR{
		name = OrbitGenerator //TBD
		type = OrbitGenerator
		
		FIXED_ORBIT{
			ORBIT{ //Generates a random orbit based on chance_2 probability, 80% chance of a orbit inside Mun's orbit, 15% between Mun's and Minmus's orbits and 5% outside Minmus's orbit
				SMA = @/chance_2 >= 80 ? Random(1350000,6750000) : @/chance_2 >= 95 ? Random(21500000,34750000) : Random(62500000,70500000)
				ECC = @/chance_2 >= 80 ? Random(0,0.5) : @/chance_2 >= 95 ? Random(0,0.3) : Random(0,0.2)
				INC = Random(0,90)
				LPE = 1
				LAN = 1
				MNA = 1
				EPH = 1
				REF = 1
			}
		}
	}
}