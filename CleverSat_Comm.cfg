//Latest changes untested, last test the ReachSpecificOrbit parameter was being completed for almost any equatorial orbit, maybe due to lacking orbital parameters
CONTRACT_TYPE{
	name = CommSat
	title = CommSat
	genericTitle = TBD
	group = CleverSat
	
	description = TBD
	genericDescription = TBD
	synopsis = TBD
	completedMessage = TBD
	
	minExpiry = 10 //TBD
	maxExpiry = 10 //TBD
	deadline = 10 //TBD
	
	prestige = Significant //Exceptional
	targetBody = HomeWorld()
	maxSimultaneous = 1
	
	rewardScience = 0.0
	rewardReputation = 1 //TBD
	rewardFunds = 1 //TBD
	failureReputation = 1 //TBD
	failureFunds = 1 //TBD
	advanceFunds = 1 //TBD
	
	//DATA{ //Random value to be used as percentual chance for the orbital type
	//	type = int
	//	TPE = Random(0,100)
	//}
	
	DATA{ //generates a random %
		type = double
		chance = Random(0,100)
	}
	
	DATA{ //Defines the orbital parameters for a sationary or tundra (aprox.) orbit based
		type = double
		sma_1 = 3463334.04
		//sma_1 = @/targetBody.IsHomeWorld() ? @/chance > 50 ? 2863334.04 : 1431667.02 : Random(@/targetBody.Radius(),@/targetBody.SphereOfInfluence())
		//The line above is an idea for a contract that offers other bodies as target, it woul be done for all orbital parameter to ensure that the orbit is possible
		ecc_1 = @/chance > 50 ? 0 : 0.99
		inc_1 = @/chance > 50 ? 0 : @/chance > 25 ? 63.4 : 116.6
		lpe_1 = lan + 90 //Longitude of Pe is LAN + Argument of Pe (APE), doing this should enforce APE = 90 so Ap would have the highest latitude (orbit would be upright no sideways)
		lan_1 = Random(0,270) //Random(-180,180)?
		mna_1 = 1
		eph_1 = 1
		//ref_1 = 1
	}
	
	PARAMETER{
		name = SatOrbit
		type = VesselParameterGroup
		defineList = SatList
		disableOnStateChange = false
		
		PARAMETER{
			name = HasCrewCapacity
			type = HasCrewCapacity
			maxCapacity = 0
		}
		
		PARAMETER{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit
			index = 0
			deviationWindow = 5.0 //Fine tune
			disableOnStateChange = false
		}
		
		PARAMETER{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = 1
			antennaType = RELAY
		}
		
		PARAMETER{
			name = VesselMass
			type = VesselMass
			minMass = 2.000
			maxMass = 4.000
		}
	}

	PARAMETER{
		name = Duration_1
		type = Duration
		duration = 6h //Fine tune
		preWaitText = TBD
		waitingText = TBD
		completionText = TBD
		startCriteria = PARAMETER_COMPLETION
		parameter = ReachSpecificOrbit
	}

	PARAMETER{ //Should also be included in a VesselParameterGroup?
		name = VisitWaypoint
		type = VisitWaypoint
		index = 0
		distance = 301850 //About 10 degrees
		horizontalDistance = 301850 //Needed?
		showMessages = true
		disableOnStateChange = false
		optional = @/chance > 10 ? false : true //When chance <= 10 the orbit will be polar, so the waypoint is useless, being optional make it not needed for contract completion
	}

	PARAMETER{
		name = Duration_2
		type = Duration
		duration = 60s //Fine tune
		preWaitText = TBD
		waitingText = TBD
		completionText = TBD
		startCriteria = PARAMETER_COMPLETION
		parameter = VisitWaypoint
		optional = @/chance > 10 ? false : true //When chance <= 10 the orbit will be polar, so the waypoint is useless, being optional make it not needed for contract completion
	}

	BEHAVIOUR{
		name = OrbitGenerator
		type = OrbitGenerator

		FIXED_ORBIT{
			ORBIT{
				SMA = @/sma_1
				ECC = @/ecc_1
				INC = @/inc_1
				LPE = @/lpe_1
				LAN = @/lan_1
				MNA = @/mna_1
				EPH = @/eph_1
				REF = 1
			}
		}
	}
	
	BEHAVIOUR{
		name = WaypointGenerator
		type = WaypointGenerator

		WAYPOINT{
			name = Covered Region
			icon = thermometer //change
			altitude = sma_1 + Pow(Pow(sma_1,2)-Pow(Pow(Pow(sma_1,2)*Pow(ecc_1,2),0.5) -1,2),0.5) - @/targetBody.Radius() //See below
			latitude = inc_1
			longitude = Random(-180,180)

			//To find the altitude from the semi-major axis (sma) it's needed the linear eccentricity (lecc) and body radius as https://en.wikipedia.org/wiki/Ellipse#Equation
			//sMa_1 = Pow(Pow(sma_1,2)*Pow(ecc_1,2),0.5) -1
			//lecc=Pow(Pow(sma_1,2)-Pow(sMa_1,2),0.5)
			//altitude = lecc + sma_1 - @/targetBody.Radius()
		}
	}

	//BEHAVIOUR{ //Generates the orbit based on the value of TPE
		//name = OrbitGenerator
		//type = OrbitGenerator
		
		//RANDOM_ORBIT{
		//	type = @/TPE > 50 ? STATIONARY : TUNDRA //Fine tune percentages
		//	deviationWindow = 8.0
		//}
	}

	//BEHAVIOUR{ //Generate the waypoint representing the region that the sat must be above
		//name = WaypointGenerator
		//type = WaypointGenerator
		
	//	WAYPOINT{ //wrong latitue for tundra
	//		name = Convered Region
	//		icon = thermometer //Change later
	//		altitude = @/TPE > 50 ? 2863334.06 : 5623168
	//		latitude = @/TPE > 50 ? 0 : 116.6
	//		longitude = Random(-180,180)
	//	}
	//}
	
	REQUIREMENT{
		name = Any
		type = Any
		REQUIREMENT{
			name = PartModuleUnlocked
			type = PartModuleUnlocked
			partModule = ModuleDeployableSolarPanel
		}
	}

	REQUIREMENT{
		name = Probe
		type = PartUnlocked
		part = probeCoreSphere //Or a better one?
	}
}
