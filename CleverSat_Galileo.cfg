//Untested
CONTRACT_TYPE{
	name = GalileoNetwork
	title = Galileo
	genericTitle = TBD
	group = CleverSat

	description = TBD
	genericDescription = TBD
	synopsis = TBD
	completedMessage = TBD

	minExpiry = 1 //TBD
	maxExpiry = 1 //TBD
	deadline = 1 //TBD

	//void Store<T>(CS_Galileo_Network, 1)
	//autoAccept = True

	prestige = Exceptional
	targetBody = HomeWorld()
	maxCompletions = 3 //The Galileo Network is made of three orbital planes, so this contract would be offered only three times
	maxSimultaneous = 1

	advanceFunds = 1 //TBD
	rewardScience = 1 //TBD
	rewardReputation = 1 //TBD
	rewardFunds = 1 //TBD
	failureReputation = 1 //TBD
	failureFunds = 1 //TBD

	PARAMETER{ //Creates a sequence of parameters that have to be completed in order. Each parameter = each sat in the orbital plane
	name = Sequence
	type = Sequence
	hiddenParameter = Sat-1
	hiddenParameter = Sat-2
	hiddenParameter = Sat-3

		PARAMETER{ //Parameters group 1, for the first sat
			name = Sat-1
			type = VesselParameterGroup
			duration = 1d
			define = Galileo Orbit-1 Sat-1
			defineList = Galileo

			PARAMETER{
				name = HasAntenna_1
				type = HasAntenna
				antennaType = RELAY
			}

			PARAMETER{
				name = HasCrewCapacity_1
				type = HasCrewCapacity
				maxCapacity = 0
			}

			PARAMETER{
				name = ReachSpecificOrbit_1
				type = ReachSpecificOrbit
				index = 0
			}
		}

		PARAMETER{ //Parameters group 2, for the second sat
			name = Sat-2
			type = VesselParameterGroup
			duration = 1d
			define = Galileo Orbit-1 Sat-2
			defineList = Galileo

			PARAMETER{
				name = HasAntenna_2
				type = HasAntenna
				antennaType = RELAY
			}

			PARAMETER{
				name = HasCrewCapacity_2
				type = HasCrewCapacity
				maxCapacity = 0
			}

			PARAMETER{
				name = ReachSpecificOrbit_2
				type = ReachSpecificOrbit
				index = 1
			}
		}

		PARAMETER{ //Parameters group 3, for the third sat
			name = Sat-3
			type = VesselParameterGroup
			duration = 1d
			define = Galileo Orbit-1 Sat-1
			defineList = Galileo

			PARAMETER{
				name = HasAntenna_3
				type = HasAntenna
				antennaType = RELAY
			}

			PARAMETER{
				name = HasCrewCapacity_3
				type = HasCrewCapacity
				maxCapacity = 0
			}

			PARAMETER{
				name = ReachSpecificOrbit_3
				type = ReachSpecificOrbit
				index = 2
			}
		}
	}

BEHAVIOUR{ //Creates three equal orbits, one for each sat in the orbital plane. So each parameter refers to only one orbit, to avoid one blocking the other
	name = OrbitGenerator
	type = OrbitGenerator

	FIXED_ORBIT{
		targetBody = Kerbin

		ORBIT{
			SMA = 2431280
			ECC = 0.0
			INC = 56
			//LPE = any
			LAN = T Retrieve<T>(CS_Galileo_Network) == 1 ? 0 : T Retrieve<T>(CS_Galileo_Network) == 2 ? 120 : 240 //ActualCompletions() == 0 ? 0 : ActualCompletions() == 1 ? 120 : 240
			//the idea here is that for each time the contract is offered the LAN changes by 120 degrees, so the orbital planes are equally spaced
			//MNA = any
			//EPH = any
			REF = 1
		}
	}

	FIXED_ORBIT{
		targetBody = Kerbin

		ORBIT{
			SMA = 2431280
			ECC = 0.0
			INC = 56
			//LPE = any
			LAN = T Retrieve<T>(CS_Galileo_Network) == 1 ? 0 : T Retrieve<T>(CS_Galileo_Network) == 2 ? 120 : 240 //ActualCompletions() == 0 ? 0 : ActualCompletions() == 1 ? 120 : 240
			//the idea here is that for each time the contract is offered the LAN changes by 120 degrees, so the orbital planes are equally spaced
			//MNA = any
			//EPH = any
			REF = 1
		}
	}

	FIXED_ORBIT{
		targetBody = Kerbin

		ORBIT{
			SMA = 2431280
			ECC = 0.0
			INC = 56
			//LPE = any
			LAN = T Retrieve<T>(CS_Galileo_Network) == 1 ? 0 : T Retrieve<T>(CS_Galileo_Network) == 2 ? 120 : 240 //ActualCompletions() == 0 ? 0 : ActualCompletions() == 1 ? 120 : 240
			//the idea here is that for each time the contract is offered the LAN changes by 120 degrees, so the orbital planes are equally spaced
			//MNA = any
			//EPH = any
			REF = 1
		}
	}
}

REQUIREMENT{
	name = Facility
	type = Facility
	facility = TrackingStation
	minLevel = 3
}

REQUIREMENT{
	name = PartUnlocked
	type = PartUnlocked
	//part = first relay antenna
}