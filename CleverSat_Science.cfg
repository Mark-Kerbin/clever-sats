//Not generating contracts
CONTRACT_TYPE{
	name = ScienceSat
	title = Launch a science probe
	genericTitle = TBD
	group = CleverSat

	description = TBD
	genericDescription = TBD
	synopsis = TBD
	completedMessage = TBD

	minExpiry = 10
	maxExpiry = 10
	deadline = 10

	targetBody = @/chance > 80 ? OrbitedBodies().Random() : @/chance > 70 ? LandedBodies().Random() : @/chance > 35 ? NextUnreachedBody() : @/chance > 10 ? @/UnorbitedBodies.Random() : @/UnlandedBodies.Random()
	//targetBody = @/targetBody1	
	prestige = @/chance > 70 ? Trivial : @/chance > 35 ? Significant : Exceptional

	maxSimultaneous = 2

	rewardScience = @/chance > 70 ? 5 : @/chance > 10 ? 25 : 50
	rewardReputation = @/chance > 70 ? 5 : @/chance > 10 ? 35 : 50
	rewardFunds = @/chance > 70 ? Random(2000,5000) : @/chance > 10 ? Random(10000,20000) : Random(20000,10000)
	failureReputation = @/rewardReputation*2
	failureFunds = @/advanceFunds*1.25
	advanceFunds = @/rewardFunds*0.5

	DATA{
		type = List<CelestialBody>
		oBodies = OrbitedBodies()
		requiredValue = false
	}

	DATA{
		type = List<CelestialBody>
		lBodies = LandedBodies()
		requiredValue = false
	}

	DATA{
		type = List<CelestialBody>
		UnorbitedBodies = $ReachedBodies.ExcludeAll(@oBodies)
		requiredValue = false
	}

	DATA{
		type = List<CelestialBody>
		UnlandedBodies = $ReachedBodies.ExcludeAll(@lBodies)
		requiredValue = false
	}
	
	//DATA{ //Problem with ReachedBodies()
	//	type = CelestialBody
	//	targetBody1 = @/chance > 80 ? OrbitedBodies().Random() : @/chance > 70 ? LandedBodies().Random() : @/chance > 35 ? NextUnreachedBody() : @/chance > 10 ? ReachedBodies().Random() : OrbitedBodies().Random()//@/chance > 80 ? OrbitedBodies().Random() : @/chance > 70 ? LandedBodies().Random() : @/chance > 35 ? NextUnreachedBody() : HomeWorld() //: @/chance > 10 ? ReachedBodies() : OrbitedBodies()
		//@/chance > 80 ? OrbitedBodies().Random() : @/chance > 70 ? LandedBodies().Random() : @/chance > 35 ? NextUnreachedBody() : @/chance > 10 ? ReachedBodies().Random() : OrbitedBodies()
		//@/chance > 80 ? OrbitedBodies().Random() : @/chance > 70 ? LandedBodies().Random() : @/chance > 35 ? NextUnreachedBody() : @/chance > 10 ? ReachedBodies()-OrbitedBodies() : OrbitedBodies()-LandedBodies()
		//check on the line above if the ReachedBodies() list also contains the OrbitedBodies() list, or if a body leaves the Reached list once it's Orbited. Same for Obited/Landed. Check if ListA()-ListB() removes the elements of B from A
	//	title = Must have reached orbit.
	//}
	
	DATA{
		type = Double
		chance = Random(0,100)
		//Orbit an already orbited body = 20%
		//Land on an already landed body = 10%
		//Reach an unreached body = 35%
		//Orbit an unonrbited but reached body = 25%
		//Land on an orbited but unlanded body =  10%
	}

	PARAMETER{
		name = VesselParameterGroup
		type = VesselParameterGroup
		defineList = SatList

		PARAMETER{
			name = ReachState
			type = ReachState
			situation = @/chance > 80 ? ORBITING : @/chance > 70 ? LANDED : @/chance > 35 ? ESCAPING : @/chance > 10 ? ORBITING : LANDED
		}

		PARAMETER{
			name = HasCrewCapacity
			type = HasCrewCapacity
			maxCapacity = 0
		}
	}


	PARAMETER{
		name = CollectScience
		type = CollectScience
		location = @/chance > 80 ? Space : @/chance > 70 ? Surface : @/chance > 10 ? Space : Surface
		recoveryMethod = RecoverOrTransmit
	}

	PARAMETER{
		name = CollectScience
		type = CollectScience
		location = @/chance > 80 ? Space : @/chance > 70 ? Surface : @/chance > 10 ? Space : Surface
		recoveryMethod = Recover
		rewardScience = @/chance > 70 ? 20 : 50
		rewardReputation = @/chance > 70 ? 25 : 55
	}
}